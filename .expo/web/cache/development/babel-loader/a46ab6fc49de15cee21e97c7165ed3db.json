{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\BootcampReactNative\\\\FinalProject\\\\src\\\\api\\\\RestApi.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\n\nvar RestApi = function (_React$Component) {\n  _inherits(RestApi, _React$Component);\n\n  var _super = _createSuper(RestApi);\n\n  function RestApi() {\n    var _this;\n\n    _classCallCheck(this, RestApi);\n\n    _this = _super.call(this);\n    _this.state = {\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(RestApi, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.apiCall();\n    }\n  }, {\n    key: \"apiCall\",\n    value: function apiCall() {\n      var resp, respJson;\n      return _regeneratorRuntime.async(function apiCall$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('http://worldtimeapi.org/api/timezone'));\n\n            case 2:\n              resp = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(resp.json());\n\n            case 5:\n              respJson = _context.sent;\n              this.setState({\n                data: respJson.datetime\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        data: this.state.data,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(Text, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 35\n            }\n          }, item.datetime, \" \");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return RestApi;\n}(React.Component);\n\nexport default RestApi;","map":{"version":3,"sources":["C:/xampp/htdocs/BootcampReactNative/FinalProject/src/api/RestApi.js"],"names":["React","render","RestApi","state","data","apiCall","fetch","resp","json","respJson","setState","datetime","item","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;;;;IAGMC,O;;;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAFY;AAKb;;;;WAED,6BAAoB;AAClB,WAAKC,OAAL;AACD;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACqBC,KAAK,CAAC,sCAAD,CAD1B;;AAAA;AACQC,cAAAA,IADR;AAAA;AAAA,+CAEyBA,IAAI,CAACC,IAAL,EAFzB;;AAAA;AAEQC,cAAAA,QAFR;AAGE,mBAAKC,QAAL,CAAc;AAAEN,gBAAAA,IAAI,EAAEK,QAAQ,CAACE;AAAjB,eAAd;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAMA,kBAAS;AAAA;;AACP,aACE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,IADnB;AAEE,QAAA,UAAU,EAAE;AAAA,cAAGQ,IAAH,QAAGA,IAAH;AAAA,iBAAc,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAOA,IAAI,CAACD,QAAZ,MAAd;AAAA,SAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;;;EAzBmBX,KAAK,CAACa,S;;AA2B5B,eAAeX,OAAf","sourcesContent":["import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { View, Text } from 'react-native'\r\n\r\nclass RestApi extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      data: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.apiCall()\r\n  }\r\n\r\n  async apiCall() {\r\n    const resp = await fetch('http://worldtimeapi.org/api/timezone')\r\n    const respJson = await resp.json()\r\n    this.setState({ data: respJson.datetime })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View\r\n        data={this.state.data}\r\n        renderItem={({ item }) => <Text>{item.datetime} </Text>}\r\n      />\r\n    )\r\n  }\r\n}\r\nexport default RestApi\r\n"]},"metadata":{},"sourceType":"module"}