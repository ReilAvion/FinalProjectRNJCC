{"version":3,"sources":["../src/Webpack.ts"],"names":["WEBPACK_LOG_TAG","webpackDevServerInstance","webpackServerPort","customMessageSocketBroadcaster","clearWebCacheAsync","projectRoot","mode","cacheFolder","path","join","ProjectUtils","logInfo","chalk","dim","fs","remove","isTargetingNative","includes","process","env","EXPO_WEBPACK_PLATFORM","broadcastMessage","message","data","WebpackDevServer","hackyConvertedMessage","sockWrite","sockets","createNativeDevServerMiddleware","port","compiler","nativeMiddleware","logger","getLogger","watchFolders","middleware","use","ManifestHandler","getManifestHandler","ExpoUpdatesManifestHandler","attachNativeDevServerMiddlewareToDevServer","server","attachToServer","messageSocket","debuggerProxy","eventsSocket","broadcast","logReporter","LogReporter","reportEvent","inspectorProxy","startAsync","options","stopAsync","logError","red","fullOptions","transformCLIOptions","getWebpackConfigEnvFromBundlingOptionsAsync","clear","https","SSL_CRT_FILE","SSL_KEY_FILE","ssl","getSSLCertAsync","name","directory","certPath","keyPath","config","loadConfigAsync","getAvailablePortAsync","defaultPort","underline","protocol","ProjectSettings","setPackagerInfoAsync","expoServerPort","packagerPort","originalBefore","devServer","before","bind","app","listen","WebpackEnvironment","HOST","error","onWebpackFinished","host","ip","address","url","originalClose","close","callback","err","finally","location","Promise","res","openAsync","openProjectAsync","compileWebAppAsync","warnings","resolve","reject","run","stats","messages","errors","_showErrors","_showWarnings","toJson","all","length","XDLError","getenv","boolish","logWarning","yellow","bundleWebAppAsync","green","bundleAsync","offline","Error","getUrlAsync","getProtocolAsync","readAsync","DEFAULT_PORT","setMode","BABEL_ENV","NODE_ENV","validateBoolOption","value","defaultValue","isImageEditingEnabled","pwa","applyOptionsToProjectSettingsAsync","newSettings","Object","keys","setAsync","dev","webpackEnv","console","log","magenta","result","devcert","certificateFor","key","cert","folder","ensureDir","writeFile","applyEnvironmentVariables","isDebugModeEnabled","bgYellow","black","output","optimization","devtoolLineToLine","pathinfo","namedModules","namedChunks","moduleIds","chunkIds","splitChunks","assign","argv","projectWebpackConfig","existsSync","webpackConfig","require","loadDefaultConfigAsync","UrlUtils","constructWebAppUrlAsync","hostType","success","e","Logger","global"],"mappings":"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","sourcesContent":["import type Log from '@expo/bunyan';\nimport {\n  attachInspectorProxy,\n  createDevServerMiddleware,\n  LogReporter,\n  MessageSocket,\n} from '@expo/dev-server';\nimport { createSymbolicateMiddleware } from '@expo/dev-server/build/webpack/symbolicateMiddleware';\nimport * as devcert from '@expo/devcert';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport http from 'http';\nimport * as path from 'path';\nimport formatWebpackMessages from 'react-dev-utils/formatWebpackMessages';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport webpack from 'webpack';\nimport WebpackDevServer from 'webpack-dev-server';\n\nimport {\n  choosePortAsync,\n  ExpoUpdatesManifestHandler,\n  ip,\n  Logger,\n  ManifestHandler,\n  ProjectSettings,\n  ProjectUtils,\n  UrlUtils,\n  WebpackEnvironment,\n  XDLError,\n} from './internal';\n\nconst WEBPACK_LOG_TAG = 'expo';\n\ntype DevServer = WebpackDevServer | http.Server;\n\nlet webpackDevServerInstance: DevServer | null = null;\nlet webpackServerPort: number | null = null;\n\ninterface WebpackSettings {\n  url: string;\n  server: DevServer;\n  port: number;\n  protocol: 'http' | 'https';\n  host?: string;\n}\n\ntype CLIWebOptions = {\n  dev?: boolean;\n  clear?: boolean;\n  pwa?: boolean;\n  nonInteractive?: boolean;\n  port?: number;\n  onWebpackFinished?: (error?: Error) => void;\n};\n\ntype BundlingOptions = {\n  dev?: boolean;\n  clear?: boolean;\n  port?: number;\n  pwa?: boolean;\n  isImageEditingEnabled?: boolean;\n  webpackEnv?: object;\n  mode?: 'development' | 'production' | 'test' | 'none';\n  https?: boolean;\n  nonInteractive?: boolean;\n  onWebpackFinished?: (error?: Error) => void;\n};\n\ntype WebpackConfiguration = webpack.Configuration;\n\nexport type WebEnvironment = {\n  projectRoot: string;\n  isImageEditingEnabled: boolean;\n  // deprecated\n  pwa: boolean;\n  mode: 'development' | 'production' | 'test' | 'none';\n  https: boolean;\n  logger: Log;\n};\n\n// A custom message websocket broadcaster used to send messages to a React Native runtime.\nlet customMessageSocketBroadcaster:\n  | undefined\n  | ((message: string, data?: Record<string, any>) => void);\n\nasync function clearWebCacheAsync(projectRoot: string, mode: string): Promise<void> {\n  const cacheFolder = path.join(projectRoot, '.expo', 'web', 'cache', mode);\n  ProjectUtils.logInfo(\n    projectRoot,\n    WEBPACK_LOG_TAG,\n    chalk.dim(`Clearing ${mode} cache directory...`)\n  );\n  try {\n    await fs.remove(cacheFolder);\n  } catch {}\n}\n\n// Temporary hack while we implement multi-bundler dev server proxy.\nexport function isTargetingNative() {\n  return ['ios', 'android'].includes(process.env.EXPO_WEBPACK_PLATFORM || '');\n}\n\nexport type WebpackDevServerResults = {\n  server: DevServer;\n  location: Omit<WebpackSettings, 'server'>;\n  messageSocket: MessageSocket;\n};\n\nexport async function broadcastMessage(message: 'reload' | string, data?: any) {\n  if (!webpackDevServerInstance || !(webpackDevServerInstance instanceof WebpackDevServer)) {\n    return;\n  }\n\n  // Allow any message on native\n  if (customMessageSocketBroadcaster) {\n    customMessageSocketBroadcaster(message, data);\n    return;\n  }\n\n  if (message !== 'reload') {\n    // TODO:\n    // Webpack currently only supports reloading the client (browser),\n    // remove this when we have custom sockets, and native support.\n    return;\n  }\n\n  // TODO:\n  // Default webpack-dev-server sockets use \"content-changed\" instead of \"reload\" (what we use on native).\n  // For now, just manually convert the value so our CLI interface can be unified.\n  const hackyConvertedMessage = message === 'reload' ? 'content-changed' : message;\n\n  webpackDevServerInstance.sockWrite(webpackDevServerInstance.sockets, hackyConvertedMessage, data);\n}\n\nfunction createNativeDevServerMiddleware(\n  projectRoot: string,\n  { port, compiler }: { port: number; compiler: webpack.Compiler }\n) {\n  if (!isTargetingNative()) {\n    return null;\n  }\n  const nativeMiddleware = createDevServerMiddleware({\n    logger: ProjectUtils.getLogger(projectRoot),\n    port,\n    watchFolders: [projectRoot],\n  });\n  // Add manifest middleware to the other middleware.\n  // TODO: Move this in to expo/dev-server.\n  nativeMiddleware.middleware\n    .use(ManifestHandler.getManifestHandler(projectRoot))\n    .use(ExpoUpdatesManifestHandler.getManifestHandler(projectRoot))\n    .use(\n      '/symbolicate',\n      createSymbolicateMiddleware({\n        projectRoot,\n        compiler,\n        logger: nativeMiddleware.logger,\n      })\n    );\n  return nativeMiddleware;\n}\n\nfunction attachNativeDevServerMiddlewareToDevServer(\n  projectRoot: string,\n  {\n    server,\n    middleware,\n    attachToServer,\n    logger,\n  }: { server: http.Server } & ReturnType<typeof createNativeDevServerMiddleware>\n) {\n  // Hook up the React Native WebSockets to the Webpack dev server.\n  const { messageSocket, debuggerProxy, eventsSocket } = attachToServer(server);\n\n  customMessageSocketBroadcaster = messageSocket.broadcast;\n\n  const logReporter = new LogReporter(logger);\n  logReporter.reportEvent = eventsSocket.reportEvent;\n\n  const { inspectorProxy } = attachInspectorProxy(projectRoot, {\n    middleware,\n    server,\n  });\n\n  return {\n    messageSocket,\n    eventsSocket,\n    debuggerProxy,\n    logReporter,\n    inspectorProxy,\n  };\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: CLIWebOptions = {}\n): Promise<WebpackDevServerResults | null> {\n  await stopAsync(projectRoot);\n\n  if (webpackDevServerInstance) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, chalk.red(`Webpack is already running.`));\n    return null;\n  }\n\n  const fullOptions = transformCLIOptions(options);\n\n  const env = await getWebpackConfigEnvFromBundlingOptionsAsync(projectRoot, fullOptions);\n\n  if (fullOptions.clear) {\n    await clearWebCacheAsync(projectRoot, env.mode);\n  }\n\n  if (env.https) {\n    if (!process.env.SSL_CRT_FILE || !process.env.SSL_KEY_FILE) {\n      const ssl = await getSSLCertAsync({\n        name: 'localhost',\n        directory: projectRoot,\n      });\n      if (ssl) {\n        process.env.SSL_CRT_FILE = ssl.certPath;\n        process.env.SSL_KEY_FILE = ssl.keyPath;\n      }\n    }\n  }\n\n  const config = await loadConfigAsync(env);\n  const port = await getAvailablePortAsync({\n    projectRoot,\n    defaultPort: options.port,\n  });\n\n  webpackServerPort = port;\n\n  ProjectUtils.logInfo(\n    projectRoot,\n    WEBPACK_LOG_TAG,\n    `Starting Webpack on port ${webpackServerPort} in ${chalk.underline(env.mode)} mode.`\n  );\n\n  const protocol = env.https ? 'https' : 'http';\n\n  if (isTargetingNative()) {\n    await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n      expoServerPort: webpackServerPort,\n      packagerPort: webpackServerPort,\n    });\n  }\n\n  // Create a webpack compiler that is configured with custom messages.\n  const compiler = webpack(config);\n\n  // Create the middleware required for interacting with a native runtime (Expo Go, or Expo Dev Client).\n  const nativeMiddleware = createNativeDevServerMiddleware(projectRoot, { port, compiler });\n  // Inject the native manifest middleware.\n  const originalBefore = config.devServer!.before!.bind(config.devServer!.before);\n  config.devServer!.before = (app, server, compiler) => {\n    originalBefore(app, server, compiler);\n\n    if (nativeMiddleware?.middleware) {\n      app.use(nativeMiddleware.middleware);\n    }\n  };\n\n  const server = new WebpackDevServer(compiler, config.devServer);\n  // Launch WebpackDevServer.\n  server.listen(port, WebpackEnvironment.HOST, function (this: http.Server, error) {\n    if (nativeMiddleware) {\n      attachNativeDevServerMiddlewareToDevServer(projectRoot, {\n        server: this,\n        ...nativeMiddleware,\n      });\n    }\n    if (error) {\n      ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, error.message);\n    }\n    if (typeof options.onWebpackFinished === 'function') {\n      options.onWebpackFinished(error);\n    }\n  });\n\n  webpackDevServerInstance = server;\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    webpackServerPort,\n  });\n\n  const host = ip.address();\n  const url = `${protocol}://${host}:${port}`;\n\n  // Extend the close method to ensure that we clean up the local info.\n  const originalClose = server.close.bind(server);\n\n  server.close = (callback?: (err?: Error) => void) => {\n    return originalClose((err?: Error) => {\n      ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        webpackServerPort: null,\n      }).finally(() => {\n        callback?.(err);\n        webpackDevServerInstance = null;\n        webpackServerPort = null;\n      });\n    });\n  };\n\n  return {\n    server,\n    location: {\n      url,\n      port,\n      protocol,\n      host,\n    },\n    // Match the native protocol.\n    messageSocket: {\n      broadcast: broadcastMessage,\n    },\n  };\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  if (webpackDevServerInstance) {\n    await new Promise(res => {\n      if (webpackDevServerInstance) {\n        ProjectUtils.logInfo(projectRoot, WEBPACK_LOG_TAG, '\\u203A Stopping Webpack server');\n        webpackDevServerInstance.close(res);\n      }\n    });\n  }\n}\n\nexport async function openAsync(projectRoot: string, options?: BundlingOptions): Promise<void> {\n  if (!webpackDevServerInstance) {\n    await startAsync(projectRoot, options);\n  }\n  await openProjectAsync(projectRoot);\n}\n\nasync function compileWebAppAsync(projectRoot: string, compiler: webpack.Compiler): Promise<any> {\n  // We generate the stats.json file in the webpack-config\n  const { warnings } = await new Promise((resolve, reject) =>\n    compiler.run((error, stats) => {\n      let messages;\n      if (error) {\n        if (!error.message) {\n          return reject(error);\n        }\n        messages = formatWebpackMessages({\n          errors: [error.message],\n          warnings: [],\n          _showErrors: true,\n          _showWarnings: true,\n        });\n      } else {\n        messages = formatWebpackMessages(\n          stats.toJson({ all: false, warnings: true, errors: true })\n        );\n      }\n\n      if (messages.errors.length) {\n        // Only keep the first error. Others are often indicative\n        // of the same problem, but confuse the reader with noise.\n        if (messages.errors.length > 1) {\n          messages.errors.length = 1;\n        }\n        return reject(new XDLError('WEBPACK_BUNDLE', messages.errors.join('\\n\\n')));\n      }\n      if (\n        getenv.boolish('EXPO_WEB_BUILD_STRICT', false) &&\n        getenv.boolish('CI', false) &&\n        messages.warnings.length\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          WEBPACK_LOG_TAG,\n          chalk.yellow(\n            '\\nTreating warnings as errors because `process.env.CI = true` and `process.env.EXPO_WEB_BUILD_STRICT = true`. \\n' +\n              'Most CI servers set it automatically.\\n'\n          )\n        );\n        return reject(new XDLError('WEBPACK_BUNDLE', messages.warnings.join('\\n\\n')));\n      }\n      resolve({\n        warnings: messages.warnings,\n      });\n    })\n  );\n  return { warnings };\n}\n\nasync function bundleWebAppAsync(projectRoot: string, config: WebpackConfiguration) {\n  const compiler = webpack(config);\n\n  try {\n    const { warnings } = await compileWebAppAsync(projectRoot, compiler);\n    if (warnings.length) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        WEBPACK_LOG_TAG,\n        chalk.yellow('Compiled with warnings.\\n')\n      );\n      ProjectUtils.logWarning(projectRoot, WEBPACK_LOG_TAG, warnings.join('\\n\\n'));\n    } else {\n      ProjectUtils.logInfo(projectRoot, WEBPACK_LOG_TAG, chalk.green('Compiled successfully.\\n'));\n    }\n  } catch (error) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, chalk.red('Failed to compile.\\n'));\n    throw error;\n  }\n}\n\nexport async function bundleAsync(projectRoot: string, options?: BundlingOptions): Promise<void> {\n  const fullOptions = transformCLIOptions({\n    ...options,\n  });\n\n  const env = await getWebpackConfigEnvFromBundlingOptionsAsync(projectRoot, {\n    ...fullOptions,\n    // Force production\n    mode: 'production',\n  });\n\n  // @ts-ignore\n  if (typeof env.offline !== 'undefined') {\n    throw new Error(\n      'offline support must be added manually: https://expo.fyi/enabling-web-service-workers'\n    );\n  }\n\n  if (fullOptions.clear) {\n    await clearWebCacheAsync(projectRoot, env.mode);\n  }\n\n  const config = await loadConfigAsync(env);\n  await bundleWebAppAsync(projectRoot, config);\n}\n\n/**\n * Get the URL for the running instance of Webpack dev server.\n *\n * @param projectRoot\n */\nexport async function getUrlAsync(projectRoot: string): Promise<string | null> {\n  if (!webpackDevServerInstance) {\n    return null;\n  }\n  const host = ip.address();\n  const protocol = await getProtocolAsync(projectRoot);\n  return `${protocol}://${host}:${webpackServerPort}`;\n}\n\nasync function getProtocolAsync(projectRoot: string): Promise<'http' | 'https'> {\n  // TODO: Bacon: Handle when not in expo\n  const { https } = await ProjectSettings.readAsync(projectRoot);\n  return https === true ? 'https' : 'http';\n}\n\nasync function getAvailablePortAsync(options: {\n  host?: string;\n  defaultPort?: number;\n  projectRoot: string;\n}): Promise<number> {\n  try {\n    const defaultPort =\n      'defaultPort' in options && options.defaultPort\n        ? options.defaultPort\n        : WebpackEnvironment.DEFAULT_PORT;\n    const port = await choosePortAsync(options.projectRoot, {\n      defaultPort,\n      host: 'host' in options && options.host ? options.host : WebpackEnvironment.HOST,\n    });\n    if (!port) {\n      throw new Error(`Port ${defaultPort} not available.`);\n    }\n    return port;\n  } catch (error) {\n    throw new XDLError('NO_PORT_FOUND', error.message);\n  }\n}\n\nfunction setMode(mode: 'development' | 'production' | 'test' | 'none'): void {\n  process.env.BABEL_ENV = mode;\n  process.env.NODE_ENV = mode;\n}\n\nfunction validateBoolOption(name: string, value: unknown, defaultValue: boolean): boolean {\n  if (typeof value === 'undefined') {\n    value = defaultValue;\n  }\n\n  if (typeof value !== 'boolean') {\n    throw new XDLError('WEBPACK_INVALID_OPTION', `'${name}' option must be a boolean.`);\n  }\n\n  return value;\n}\n\nfunction transformCLIOptions(options: CLIWebOptions): BundlingOptions {\n  // Transform the CLI flags into more explicit values\n  return {\n    ...options,\n\n    isImageEditingEnabled: options.pwa,\n  };\n}\n\nasync function applyOptionsToProjectSettingsAsync(\n  projectRoot: string,\n  options: BundlingOptions\n): Promise<ProjectSettings.Settings> {\n  const newSettings: Partial<ProjectSettings.Settings> = {};\n  // Change settings before reading them\n  if (typeof options.https === 'boolean') {\n    newSettings.https = options.https;\n  }\n\n  if (Object.keys(newSettings).length) {\n    await ProjectSettings.setAsync(projectRoot, newSettings);\n  }\n\n  return await ProjectSettings.readAsync(projectRoot);\n}\n\nasync function getWebpackConfigEnvFromBundlingOptionsAsync(\n  projectRoot: string,\n  options: BundlingOptions\n): Promise<WebEnvironment> {\n  const { dev, https } = await applyOptionsToProjectSettingsAsync(projectRoot, options);\n\n  const mode = typeof options.mode === 'string' ? options.mode : dev ? 'development' : 'production';\n\n  const isImageEditingEnabled = validateBoolOption(\n    'isImageEditingEnabled',\n    options.isImageEditingEnabled,\n    true\n  );\n\n  return {\n    projectRoot,\n    pwa: isImageEditingEnabled,\n    logger: ProjectUtils.getLogger(projectRoot),\n    isImageEditingEnabled,\n    mode,\n    https,\n    ...(options.webpackEnv || {}),\n  };\n}\n\nasync function getSSLCertAsync({\n  name,\n  directory,\n}: {\n  name: string;\n  directory: string;\n}): Promise<{ keyPath: string; certPath: string } | false> {\n  console.log(\n    chalk.magenta`Ensuring auto SSL certificate is created (you might need to re-run with sudo)`\n  );\n  try {\n    const result = await devcert.certificateFor(name);\n    if (result) {\n      const { key, cert } = result;\n      const folder = path.join(directory, '.expo', 'web', 'development', 'ssl');\n      await fs.ensureDir(folder);\n\n      const keyPath = path.join(folder, `key-${name}.pem`);\n      await fs.writeFile(keyPath, key);\n\n      const certPath = path.join(folder, `cert-${name}.pem`);\n      await fs.writeFile(certPath, cert);\n\n      return {\n        keyPath,\n        certPath,\n      };\n    }\n    return result;\n  } catch (error) {\n    console.log(`Error creating SSL certificates: ${error}`);\n  }\n\n  return false;\n}\n\nfunction applyEnvironmentVariables(config: WebpackConfiguration): WebpackConfiguration {\n  // Use EXPO_DEBUG_WEB=true to enable debugging features for cases where the prod build\n  // has errors that aren't caught in development mode.\n  // Related: https://github.com/expo/expo-cli/issues/614\n  if (WebpackEnvironment.isDebugModeEnabled() && config.mode === 'production') {\n    console.log(chalk.bgYellow.black('Bundling the project in debug mode.'));\n\n    const output = config.output || {};\n    const optimization = config.optimization || {};\n\n    // Enable line to line mapped mode for all/specified modules.\n    // Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source.\n    // It’s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.\n    // true enables it for all modules (not recommended)\n    output.devtoolLineToLine = true;\n\n    // Add comments that describe the file import/exports.\n    // This will make it easier to debug.\n    output.pathinfo = true;\n    // Instead of numeric ids, give modules readable names for better debugging.\n    optimization.namedModules = true;\n    // Instead of numeric ids, give chunks readable names for better debugging.\n    optimization.namedChunks = true;\n    // Readable ids for better debugging.\n    // @ts-ignore Property 'moduleIds' does not exist.\n    optimization.moduleIds = 'named';\n    // if optimization.namedChunks is enabled optimization.chunkIds is set to 'named'.\n    // This will manually enable it just to be safe.\n    // @ts-ignore Property 'chunkIds' does not exist.\n    optimization.chunkIds = 'named';\n\n    if (optimization.splitChunks) {\n      optimization.splitChunks.name = true;\n    }\n\n    Object.assign(config, { output, optimization });\n  }\n\n  return config;\n}\n\nasync function loadConfigAsync(\n  env: WebEnvironment,\n  argv?: string[]\n): Promise<WebpackConfiguration> {\n  setMode(env.mode);\n  // Check if the project has a webpack.config.js in the root.\n  const projectWebpackConfig = path.resolve(env.projectRoot, 'webpack.config.js');\n  let config: WebpackConfiguration;\n  if (fs.existsSync(projectWebpackConfig)) {\n    const webpackConfig = require(projectWebpackConfig);\n    if (typeof webpackConfig === 'function') {\n      config = await webpackConfig(env, argv);\n    } else {\n      config = webpackConfig;\n    }\n  } else {\n    // Fallback to the default expo webpack config.\n    const loadDefaultConfigAsync = require('@expo/webpack-config');\n    config = await loadDefaultConfigAsync(env, argv);\n  }\n  return applyEnvironmentVariables(config);\n}\n\nasync function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: Error }> {\n  try {\n    const url = await UrlUtils.constructWebAppUrlAsync(projectRoot, { hostType: 'localhost' });\n    if (!url) {\n      throw new Error('Webpack Dev Server is not running');\n    }\n    openBrowser(url);\n    return { success: true, url };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on web: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n"],"file":"Webpack.js"}