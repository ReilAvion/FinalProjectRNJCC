{"version":3,"sources":["../src/Analytics.ts"],"names":["PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","AnalyticsClient","userId","_userId","version","_version","flush","rudderstackClient","initializeClient","rudderstackWriteKey","rudderstackDataPlaneURL","packageVersion","RudderAnalytics","URL","toString","flushInterval","logger","silent","identifyUser","traits","userTraits","identify","context","getContext","logEvent","name","properties","track","event","platform","os","ip","address","device","model","brand","release","app","defaultClient"],"mappings":"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","sourcesContent":["import RudderAnalytics from '@expo/rudder-sdk-node';\nimport os from 'os';\nimport { URL } from 'url';\n\nimport { ip } from './internal';\n\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nexport class AnalyticsClient {\n  private userTraits?: { [key: string]: any };\n  private rudderstackClient?: RudderAnalytics;\n  private _userId?: string;\n  private _version?: string;\n\n  public get userId() {\n    return this._userId;\n  }\n\n  public get version() {\n    return this._version;\n  }\n\n  public flush() {\n    if (this.rudderstackClient) {\n      this.rudderstackClient.flush();\n    }\n  }\n\n  public initializeClient(\n    rudderstackWriteKey: string,\n    rudderstackDataPlaneURL: string,\n    packageVersion: string\n  ) {\n    // Do not wait before flushing, we want node to close immediately if the programs ends\n    this.rudderstackClient = new RudderAnalytics(\n      rudderstackWriteKey,\n      new URL('/v1/batch', rudderstackDataPlaneURL).toString(),\n      {\n        flushInterval: 300,\n      }\n    );\n    this.rudderstackClient.logger.silent = true;\n    this._version = packageVersion;\n  }\n\n  public identifyUser(userId: string, traits: { [key: string]: any }) {\n    this._userId = userId;\n    this.userTraits = traits;\n\n    if (this.rudderstackClient) {\n      this.rudderstackClient.identify({\n        userId: this._userId,\n        traits: this.userTraits,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  public logEvent(name: string, properties: any = {}) {\n    if (this.rudderstackClient && this._userId) {\n      this.rudderstackClient.track({\n        userId: this._userId,\n        event: name,\n        properties,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  private getContext(): any {\n    const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n    const context = {\n      ip: ip.address(),\n      device: {\n        model: platform,\n        brand: platform,\n      },\n      os: {\n        name: platform,\n        version: os.release(),\n      },\n      app: {},\n    };\n\n    if (this._version) {\n      context.app = {\n        version: this._version,\n      };\n    }\n\n    return context;\n  }\n}\n\nconst defaultClient = new AnalyticsClient();\n\nexport default defaultClient;\n"],"file":"Analytics.js"}