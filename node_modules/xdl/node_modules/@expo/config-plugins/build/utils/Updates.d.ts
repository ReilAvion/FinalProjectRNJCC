import { Android, ExpoConfig, IOS } from '@expo/config-types';
export declare type ExpoConfigUpdates = Pick<ExpoConfig, 'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'>;
declare type TempRuntimeVersion = {
    runtimeVersion?: string | {
        policy: 'nativeVersion' | 'sdkVersion';
    };
};
export declare function getUpdateUrl(config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>, username: string | null): string | null;
export declare function getNativeVersion(config: Pick<ExpoConfig, 'version'> & {
    android?: Pick<Android, 'versionCode'> & TempRuntimeVersion;
    ios?: Pick<IOS, 'buildNumber'> & TempRuntimeVersion;
}, platform: 'android' | 'ios'): string;
/**
 * Compute runtime version policies.
 * @return an expoConfig with only string valued platform specific runtime versions.
 */
export declare const withRuntimeVersion: (config: ExpoConfig & {
    ios?: TempRuntimeVersion;
    android?: TempRuntimeVersion;
}) => ExpoConfig;
export declare function getRuntimeVersion(config: Pick<ExpoConfig, 'version' | 'sdkVersion'> & TempRuntimeVersion & {
    android?: Pick<Android, 'versionCode'> & TempRuntimeVersion;
    ios?: Pick<IOS, 'buildNumber'> & TempRuntimeVersion;
}, platform: 'android' | 'ios'): string;
export {};
